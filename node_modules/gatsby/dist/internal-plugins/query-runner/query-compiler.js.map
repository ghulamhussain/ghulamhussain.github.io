{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-compiler.js"],"names":["normalize","require","_","printTransforms","ArgumentsOfCorrectTypeRule","DefaultValuesOfCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","validationRules","Runner","baseDir","fragmentsDir","schema","reportError","message","process","env","NODE_ENV","panic","format","red","log","compileAll","parseEverything","nodes","write","files","sync","nodir","concat","filter","d","match","map","Object","keys","getState","components","c","uniq","parser","parseFiles","compiledNodes","Map","namePathMap","nameDefMap","documents","filePath","doc","errors","length","push","definitions","forEach","def","name","value","set","entries","compilerContext","addAll","convertASTDocuments","transform","bind","printContext","reduce","ctx","node","kind","get","has","otherNode","text","getRoot","print","join","path","program","runner","directory","queries","compile"],"mappings":"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","file":"query-compiler.js","sourcesContent":["// @flow\nimport path from \"path\"\nconst normalize = require(`normalize-path`)\nimport glob from \"glob\"\n\nimport { validate } from \"graphql\"\nimport { IRTransforms } from \"relay-compiler\"\nimport RelayParser from \"relay-compiler/lib/RelayParser\"\nimport ASTConvert from \"relay-compiler/lib/ASTConvert\"\nimport GraphQLCompilerContext from \"relay-compiler/lib/GraphQLCompilerContext\"\nimport filterContextForNode from \"relay-compiler/lib/filterContextForNode\"\nconst _ = require(`lodash`)\n\nimport { store } from \"../../redux\"\nimport FileParser from \"./file-parser\"\nimport GraphQLIRPrinter from \"relay-compiler/lib/GraphQLIRPrinter\"\nimport {\n  graphqlError,\n  graphqlValidationError,\n  multipleRootQueriesError,\n} from \"./graphql-errors\"\nimport report from \"gatsby-cli/lib/reporter\"\n\nimport type { DocumentNode, GraphQLSchema } from \"graphql\"\n\nconst { printTransforms } = IRTransforms\n\nconst {\n  ArgumentsOfCorrectTypeRule,\n  DefaultValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\ntype RootQuery = {\n  name: string,\n  path: string,\n  text: string,\n}\n\ntype Queries = Map<string, RootQuery>\n\nconst validationRules = [\n  ArgumentsOfCorrectTypeRule,\n  DefaultValuesOfCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n]\n\nclass Runner {\n  baseDir: string\n  schema: GraphQLSchema\n  fragmentsDir: string\n\n  constructor(baseDir: string, fragmentsDir: string, schema: GraphQLSchema) {\n    this.baseDir = baseDir\n    this.fragmentsDir = fragmentsDir\n    this.schema = schema\n  }\n\n  reportError(message) {\n    if (process.env.NODE_ENV === `production`) {\n      report.panic(`${report.format.red(`GraphQL Error`)} ${message}`)\n    } else {\n      report.log(`${report.format.red(`GraphQL Error`)} ${message}`)\n    }\n  }\n\n  async compileAll() {\n    let nodes = await this.parseEverything()\n    return await this.write(nodes)\n  }\n\n  async parseEverything() {\n    // FIXME: this should all use gatsby's configuration to determine parsable\n    // files (and how to parse them)\n    let files = glob.sync(`${this.fragmentsDir}/**/*.+(t|j)s?(x)`, {\n      nodir: true,\n    })\n    files = files.concat(\n      glob.sync(`${this.baseDir}/**/*.+(t|j)s?(x)`, { nodir: true })\n    )\n    files = files.filter(d => !d.match(/\\.d\\.ts$/))\n    files = files.map(normalize)\n\n    // Ensure all page components added as they're not necessarily in the\n    // pages directory e.g. a plugin could add a page component.  Plugins\n    // *should* copy their components (if they add a query) to .cache so that\n    // our babel plugin to remove the query on building is active (we don't\n    // run babel on code in node_modules). Otherwise the component will throw\n    // an error in the browser of \"graphql is not defined\".\n    files = files.concat(\n      Object.keys(store.getState().components).map(c => normalize(c))\n    )\n    files = _.uniq(files)\n\n    let parser = new FileParser()\n\n    return await parser.parseFiles(files)\n  }\n\n  async write(nodes: Map<string, DocumentNode>): Promise<Queries> {\n    const compiledNodes: Queries = new Map()\n    const namePathMap = new Map()\n    const nameDefMap = new Map()\n    const documents = []\n\n    for (let [filePath, doc] of nodes.entries()) {\n      let errors = validate(this.schema, doc, validationRules)\n\n      if (errors && errors.length) {\n        this.reportError(graphqlValidationError(errors, filePath))\n        return compiledNodes\n      }\n\n      documents.push(doc)\n      doc.definitions.forEach((def: any) => {\n        const name: string = def.name.value\n        namePathMap.set(name, filePath)\n        nameDefMap.set(name, def)\n      })\n    }\n\n    let compilerContext = new GraphQLCompilerContext(this.schema)\n    try {\n      compilerContext = compilerContext.addAll(\n        ASTConvert.convertASTDocuments(\n          this.schema,\n          documents,\n          validationRules,\n          RelayParser.transform.bind(RelayParser)\n        )\n      )\n    } catch (error) {\n      this.reportError(graphqlError(namePathMap, nameDefMap, error))\n      return compiledNodes\n    }\n\n    const printContext = printTransforms.reduce(\n      (ctx, transform) => transform(ctx, this.schema),\n      compilerContext\n    )\n\n    compilerContext.documents().forEach((node: { name: string }) => {\n      if (node.kind !== `Root`) return\n\n      const { name } = node\n      let filePath = namePathMap.get(name) || ``\n\n      if (compiledNodes.has(filePath)) {\n        let otherNode = compiledNodes.get(filePath)\n        this.reportError(\n          multipleRootQueriesError(\n            filePath,\n            nameDefMap.get(name),\n            otherNode && nameDefMap.get(otherNode.name)\n          )\n        )\n        return\n      }\n\n      let text = filterContextForNode(printContext.getRoot(name), printContext)\n        .documents()\n        .map(GraphQLIRPrinter.print)\n        .join(`\\n`)\n\n      compiledNodes.set(filePath, {\n        name,\n        text,\n        path: path.join(this.baseDir, filePath),\n      })\n    })\n\n    return compiledNodes\n  }\n}\nexport { Runner }\n\nexport default async function compile(): Promise<Map<string, RootQuery>> {\n  const { program, schema } = store.getState()\n\n  const runner = new Runner(\n    `${program.directory}/src`,\n    `${program.directory}/.cache/fragments`,\n    schema\n  )\n\n  const queries = await runner.compileAll()\n\n  return queries\n}\n"]}